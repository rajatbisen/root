Assignment 3:

Write a MongoDB query to display all the documents in the collection restaurants

db.addreses.find()

Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant

db.addresses.find({}, {restaurant_id:1, name:1,borough:1, cuisine:1 })

Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant.

db.addresses.find({}, {restaurant_id:1, _id:0, name:1,borough:1, cuisine:1 })

Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant.

db.addresses.find({}, {restaurant_id:1, _id:0, name:1,borough:1, "address.zipcode":1 })

Write a MongoDB query to display all the restaurant which is in the borough Bronx.

db.addresses.find({"borough":"Bronx"})

Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.

db.addresses.find({"borough":"Bronx"}).limit(5)

Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.

db.addresses.find({"borough":"Bronx"}).limit(5).skip(5)

Write a MongoDB query to find the restaurants who achieved a score more than 90

db.addresses.find({"grades.score":{$gt:90}})

Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100.

db.addresses.find({"grades.score":{$gt:80, $lt:100}})

Write a MongoDB query to find the restaurants which locate in latitude value less than -95.754168.

db.addresses.find({"address.coord":{$lt : -95.754168}})

Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168.

db.addresses.find({$and:
[
		{"cuisine" : {$ne :"American "}},
                       {"grades.score" : {$gt : 70}},
               {"address.coord" : {$lt : -65.754168}}
                    ]
                }
                    )
Write a MongoDB query to find the restaurants which do not prepare and cuisine of 'Amercian' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order.

db.addresses.find( {
                             "cuisine" : {$ne : "American "},
                             "grades.grade" :"A",
                             "borough": {$ne : "Brooklyn"}
                       } 
                    ).sort({"cuisine":-1})
		})

Write a MongoDB query the restaurant Id,name,borough and cuisine for those restaurant which contain 'Wil' as first three letters for its name.
		db.addresses.find(
				{name: /^Wil/},
		{
				"restaurant_id" : 1,
				"name":1,"borough":1,
				"cuisine" :1
				}
		)


Write a MongoDB query to find the restaurant Id,name,borough and cuisine for those restaurants which contain 'ces' as last three letters for its name.
		db.addresses.find(
			{name: /ces$/},
		{
			"restaurant_id" : 1,
			"name":1,"borough":1,
			"cuisine" :1
		}
				)


Write a MongoDB query to find the restaurant Id,name,borough and cuisine for those restaurants which contain 'reg' as three letters somewhere in its name.
		db.addresses.find(
		{"name": /.*Reg.*/},
		{
			"restaurant_id" : 1,
			"name":1,"borough":1,
			"cuisine" :1
		}
			)


Write a MongoDB query to find the restaurants which belong to the borough Bronx and prepared either Amercian or Chinese dish.

		db.addresses.find(
		{ 
			"borough": "Bronx" , 
			$or : [
			{ "cuisine" : "American " },
			{ "cuisine" : "Chinese" }
			] 
		} 
			)

Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which belong to the borough Staten Island or Queens or Bronxor Brooklyn.
		db.addresses.find(
		{"borough" :{$in :["Staten Island","Queens","Bronx","Brooklyn"]}},
		{
			"restaurant_id" : 1,
			"name":1,"borough":1,		
			"cuisine" :1
		}
		)

Write  a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which are not belonging to the borough Staten Island or Queens or Bronxor Brooklyn.
		db.addresses.find(
			{"borough" :{$nin :["Staten Island","Queens","Bronx","Brooklyn"]}},
			{
				"restaurant_id" : 1,
				"name":1,"borough":1,
					"cuisine" :1
			}
				)	

Write a MongoDB query to find the restaurant Id,name,borough and cuisine for those restaurant which achieved a score which is not more than 10.
			db.addresses.find(
				{"grades.score" : 
				{ $not: 
				{$gt : 10}
				}
					},
				{
					"restaurant_id" : 1,
					"name":1,"borough":1,
					"cuisine" :1
				}
			)

Write MongoDB except dish American and chinese or name begin with Wil
		db.addresses.find(
{$or: [
  {name: /^Wil/}, 
  {"$and": [
       {"cuisine" : {$ne :"American "}}, 
       {"cuisine" : {$ne :"Chinees"}}
   ]}
]}
,{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1}
)


Write MongoDB grade A scored 11 on ISODate 2014-08-11TOO:00:00Z

		db.addresses.find( 
                {
                 "grades.date": ISODate("2014-08-11T00:00:00Z"), 
                 "grades.grade":"A" , 
                 "grades.score" : 11
                }, 
                {"restaurant_id" : 1,"name":1,"grades":1}
             )


Write MongoDB 2nd element of grades contain A and score 9 on ISODate 2014-08-11TOO:00:00Z

		db.addresses.find( 
                      { "grades.1.date": ISODate("2014-08-11T00:00:00Z"), 
                        "grades.1.grade":"A" , 
                        "grades.1.score" : 9
                      }, 
                       {"restaurant_id" : 1,"name":1,"grades":1}
                   )



write a MongoDB 2nd element of coord array more than 42 and upto 52

		db.addresses.find( 
                      { 
                        "address.coord.1": {$gt : 42, $lte : 52}
                      },
                        {"restaurant_id" : 1,"name":1,"address":1,"coord":1}
                   )


Write a MongoDB query ascending
	db.addresses.find().sort(
                          {"name":1}
                          )




Write a MongoDB query descending
		db.addesses.find().sort(
                          {"name":-1}
                          )


Write a MongoDB cuisine in ascending and borough in desecending 
		db.addresses.find().sort(
                           {"cuisine":1,"borough" : -1,}
                          )


Write a query addresses contain street or not

		db.addresses.find(
                     {"address.street" : 
                         { $exists : true } 
                     } 
                   )


Write a MongoDB coord feild is double
		db.addresses.find(
                    {"address.coord" : 
                       {$type : 1}
                    }
                   )


Write a MongoDb returns 0 divide by 7

		db.addresses.find(
                      {"grades.score" :
                         {$mod : [7,0]}
                      },
                         {"restaurant_id" : 1,"name":1,"grades":1}
                    )